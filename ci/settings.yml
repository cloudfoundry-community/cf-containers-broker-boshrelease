---
meta:
  name:    cf-containers-broker
  target:  ohio-cf
  url:     https://ci2.starkandwayne.com

  manifest:
    path:   manifests/docker-broker.yml
    operator_file_paths: "manifests/operators/services/redis32.yml,manifests/operators/services/postgresql96.yml" # comma separated list relative to repo root
  test-errand: sanity-test

  initial_version: 1.0.0

  image:
    name: starkandwayne/concourse-ruby
    tag: 2.5

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: us-east-1
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:  cloudfoundry-community
    repo:   (( grab meta.pipeline ))
    branch: master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       (( concat meta.name "-boshrelease" ))
    blob_success:  '(( concat ": New version of  was detected, and updated in master. <" meta.url "/teams//pipelines/| Cut a new release?>" ))'
    blob_failure:  '(( concat ": :airplane_arriving: <" meta.url "/teams//pipelines//jobs//builds/| Failed to update the blob for >" ))'

groups:
- name: compiled-releases
  jobs:
    - (( append ))
    - docker-compile-release
    - bpm-compile-release
    - cf-subway-compile-release

jobs:
- name: use-compiled-releases
  plan:
    - name: resources
      in_parallel:
        steps:
        - (( append ))
        - get: docker-compiled-release
          passed: [docker-compile-release]
        - get: bpm-compiled-release
          passed: [bpm-compile-release]
        - get: cf-subway-compiled-release
          passed: [cf-subway-compile-release]
    - task: use-compiled-releases
      config:
        inputs:
          - (( append ))
          - name: docker-compiled-release
          - name: bpm-compiled-release
          - name: cf-subway-compiled-release

- name: docker-compile-release
  public: true
  serial: true
  plan:
    - get: git
    - get: github
      resource: docker-boshrelease
      trigger: true
    - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
      params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
    - put: docker-compiled-release
      params:
        file: "compiled-release/compiled-releases/docker/*.tgz"

- name: bpm-compile-release
  public: true
  serial: true
  plan:
    - get: git
    - get: github
      resource: bpm-release
      trigger: true
    - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
      params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
    - put: bpm-compiled-release
      params:
        file: "compiled-release/compiled-releases/bpm/*.tgz"

- name: cf-subway-compile-release
  public: true
  serial: true
  plan:
    - get: git
    - get: github
      resource: cf-subway-boshrelease
      trigger: true
    - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
      params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
    - put: cf-subway-compiled-release
      params:
        file: "compiled-release/compiled-releases/cf-subway/*.tgz"

resources:
- name: docker-boshrelease
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: docker-boshrelease
    access_token: (( grab meta.github.access_token ))

- name: docker-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "compiled-releases/docker/.*-(\\d+).tgz"

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bpm-release

- name: bpm-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "compiled-releases/bpm/.*-(\\d+).tgz"

- name: cf-subway-boshrelease
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/cf-subway-boshrelease

- name: cf-subway-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "compiled-releases/cf-subway/.*-(\\d+).tgz"
